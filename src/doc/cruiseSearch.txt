# CruiseSearch Component Documentation

## Overview
The CruiseSearch component is the main container for the cruise booking interface, managing the overall 
layout and orchestrating the interaction between various sub-components.

## Component Structure

### 1. Imports and Dependencies

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchCruiseData,
  resetFilters,
  selectCruiseError,
  selectCruiseLoading,
  selectFilteredItineraries,
} from "../store/cruiseSlice";


### 2. Sub-Components
- DestinationSelector - For selecting cruise destinations
- DateSelector - For choosing cruise dates
- QuickFilters - For additional filtering options
- CruiseCard - For displaying individual cruise details

## State Management

### 1. Redux Integration

const dispatch = useDispatch();
const filteredItineraries = useSelector(selectFilteredItineraries);
const loading = useSelector(selectCruiseLoading);
const error = useSelector(selectCruiseError);


### 2. Initial Data Fetching

useEffect(() => {
  dispatch(fetchCruiseData());
}, [dispatch]);



## Data Flow

### 1. Initial Load

    A[Component Mount] --> B[Dispatch fetchCruiseData]
    B --> C[Loading State]
    C --> D[Data Received]
    D --> E[Display Cruises]


### 2. Filter Flow

    A[User Applies Filter] --> B[Redux State Update]
    B --> C[selectFilteredItineraries]
    C --> D[Re-render Results]


## Responsive Design

### 1. Mobile Layout

.flex-col         /* Stacked filters on mobile */


### 2. Desktop Layout

sm:flex-row      /* Side-by-side filters on desktop */
lg:grid-cols-2   /* Two columns of cruise cards */


## Key Features

### 1. Dynamic Results
- Real-time filtering
- Immediate UI updates
- Pagination-free design

### 2. Error Handling
- Graceful error display
- Retry functionality
- Clear user feedback

### 3. Loading States
- Skeleton loading
- Smooth transitions
- Maintained layout

## Usage Scenarios

### 1. Initial Page Load
// Component mounts
// Data fetching starts
// Loading skeletons shown
// Data displays


### 2. Filter Application

// User selects filter
// Results update
// Count updates
// UI refreshes


### 3. Error Recovery

// Error occurs
// Error message shown
// Retry option available
// Normal flow resumes after retry


This documentation provides a complete understanding of:
1. Component structure and organization
2. State management and data flow
3. UI states and handling
4. Performance considerations
5. Best practices implementation
