# CruiseSlice Documentation

## Overview
The cruiseSlice is the central state management unit handling all cruise-related data, filtering, and operations using Redux Toolkit.

## Core Components

### 1. Constants and Utilities
```javascript
export const MONTHS = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
];
```
- Used for date formatting and parsing
- Supports date-based filtering operations

### 2. Async Thunk

- Handles asynchronous data fetching
- Manages API integration
- Includes error handling

### 3. Initial State
```javascript
const initialState = {
    itineraries: [],          // Holds cruise itineraries
    availablePorts: [],       // Available ports for selection
    filters: {
        selectedDestinations: [], // Selected destination filters
        dateRange: [],           // Date range for filtering
        tripType: "",            // Type of trip (one_way/round)
        nights: [],              // Night duration filters
        departurePort: "",       // Selected departure port
    },
    loading: false,           // Loading state
    error: null              // Error state
};

## Data Flow and State Management

### 1. Action Flow

graph TD
    A[User Interaction] --> B[Dispatch Action]
    B --> C[Reducer/Extra Reducer]
    C --> D[State Update]
    D --> E[Selector Recalculation]
    E --> F[Component Re-render]


### 2. Filter Types and Implementation

#### a. Destination Filtering
```javascript
if (filters.selectedDestinations?.length > 0) {
    const cruisePorts = [
        cruise.starting_port?.name,
        cruise.destination_port?.name,
        ...(cruise.ports || []).map(port => port.name)
    ].filter(Boolean);
}
- Checks starting ports
- Checks destination ports
- Includes intermediate ports

#### b. Date Range Filtering

if (filters.dateRange?.length > 0) {
    // Single date selection
    if (filters.dateRange.length === 1) {
        // ... date comparison logic
    }
    // Date range selection
    if (filters.dateRange.length === 2) {
        // ... date range comparison logic
    }
}


#### c. Trip Type Filtering

if (filters.tripType && filters.tripType !== 'all') {
    if (cruise.trip_type?.toLowerCase() !== filters.tripType.toLowerCase()) {
        return false;
    }
}


#### d. Nights Filtering

if (filters.nights?.length > 0) {
    const nightsMatch = filters.nights.some(range => {
        if (range === '7+') {
            return cruise.nights >= 7;
        }
        const [min, max] = range.split('-').map(Number);
        return cruise.nights >= min && cruise.nights <= max;
    });
}


### 3. Selectors

#### Base Selectors

const selectCruise = state => state.cruise;
const selectAllItineraries = state => state.cruise.itineraries;
const selectFilters = state => state.cruise.filters;


#### Memoized Selectors

export const selectFilteredItineraries = createSelector(
    [selectAllItineraries, selectFilters],
    (itineraries, filters) => {
        // Filtering logic
    }
);

export const selectAvailablePortsWithCounts = createSelector(
    [selectAllItineraries, selectCruise],
    (itineraries, cruiseState) => {
        // Port counting logic
    }
);

## Usage Patterns

### 1. Filtering Data

// In components
const filteredCruises = useSelector(selectFilteredItineraries);


### 2. Updating Filters

dispatch(updateFilters({
    selectedDestinations: ['Mumbai'],
    dateRange: ['18 November 2024']
}));


### 3. Resetting Filters

dispatch(resetFilters());




This documentation provides a comprehensive understanding of:
1. State management structure
2. Filter implementation
3. Data flow patterns
4. Integration points
5. Performance considerations